import Element from "../element/Element";

//a bit verbose but really great
//for autocompletion
export function Create({
  centered = false,
  cx = false,
  cy = false,
  type = "div",
  onDrag = null,
  onTouch = null,
  onDrop = null,
  onMove = null,
  onClick = null,
  onHoverIn = null,
  onHoverOut = null,
  text = null,
  children = [],
  name = null,
  col = false,
  row = false,
  height = null,
  width = null,
  x = 0,
  y = 0,
  z = 0,
  scale = 1,
  scaleX = 1,
  scaleY = 1,
  rotation = 0,
  rotationX = 0,
  rotationY = 0,
  borderRadius = null,
  backgroundColor = null,
  background = null,
  margin = null,
  marginTop = null,
  marginLeft = null,
  marginBottom = null,
  marginRight = null,
  padding = null,
  paddingTop = null,
  paddingLeft = null,
  paddingBottom = null,
  paddingRight = null,
  position = null,
  top = null,
  left = null,
  right = null,
  bottom = null,
  fontSize = null,
  fontWeight = null,
  opacity = null,
  color = null,
  overflow = null,
  href = null,
  textTransform = null,
  textAlign = null,
  maxWidth = null,
  perspective = null,
  element = null,
  ...css
} = {}) {
  const el = new Element({
    type,
    attributes: {
      text,
      name,
      href
    },
    element,
    events: {
      onDrag,
      onTouch,
      onDrop,
      onMove,
      onClick,
      onHoverIn,
      onHoverOut
    },
    shortcuts: {
      centered,
      cx,
      cy,
      col,
      row
    },
    css: {
      height,
      width,
      x,
      y,
      z,
      scale,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      borderRadius,
      backgroundColor,
      background,
      margin,
      marginBottom,
      marginLeft,
      marginRight,
      marginTop,
      padding,
      paddingBottom,
      paddingLeft,
      paddingRight,
      paddingTop,
      position,
      top,
      left,
      right,
      bottom,
      fontSize,
      fontWeight,
      opacity,
      color,
      overflow,
      textTransform,
      textAlign,
      maxWidth,
      perspective,
      ...css
    },
    children
  });

  return el;
}
